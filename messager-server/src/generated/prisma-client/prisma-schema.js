module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMessage {
  count: Int!
}

type AggregateReply {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: [ID!]!
  likesNumber: Int!
  dislikes: [ID!]!
  dislikesNumber: Int!
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply!]
  createdAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreatedislikesInput {
  set: [ID!]
}

input MessageCreateInput {
  id: ID
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: MessageCreatelikesInput
  likesNumber: Int!
  dislikes: MessageCreatedislikesInput
  dislikesNumber: Int!
  replies: ReplyCreateManyWithoutMessageInput
}

input MessageCreatelikesInput {
  set: [ID!]
}

input MessageCreateOneWithoutRepliesInput {
  create: MessageCreateWithoutRepliesInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutRepliesInput {
  id: ID
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: MessageCreatelikesInput
  likesNumber: Int!
  dislikes: MessageCreatedislikesInput
  dislikesNumber: Int!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  type_ASC
  type_DESC
  text_ASC
  text_DESC
  likesNumber_ASC
  likesNumber_DESC
  dislikesNumber_ASC
  dislikesNumber_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  id: ID!
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: [ID!]!
  likesNumber: Int!
  dislikes: [ID!]!
  dislikesNumber: Int!
  createdAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdatedislikesInput {
  set: [ID!]
}

input MessageUpdateInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: MessageUpdatelikesInput
  likesNumber: Int
  dislikes: MessageUpdatedislikesInput
  dislikesNumber: Int
  replies: ReplyUpdateManyWithoutMessageInput
}

input MessageUpdatelikesInput {
  set: [ID!]
}

input MessageUpdateManyMutationInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: MessageUpdatelikesInput
  likesNumber: Int
  dislikes: MessageUpdatedislikesInput
  dislikesNumber: Int
}

input MessageUpdateOneRequiredWithoutRepliesInput {
  create: MessageCreateWithoutRepliesInput
  update: MessageUpdateWithoutRepliesDataInput
  upsert: MessageUpsertWithoutRepliesInput
  connect: MessageWhereUniqueInput
}

input MessageUpdateWithoutRepliesDataInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: MessageUpdatelikesInput
  likesNumber: Int
  dislikes: MessageUpdatedislikesInput
  dislikesNumber: Int
}

input MessageUpsertWithoutRepliesInput {
  update: MessageUpdateWithoutRepliesDataInput!
  create: MessageCreateWithoutRepliesInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  type: PostObjectType
  type_not: PostObjectType
  type_in: [PostObjectType!]
  type_not_in: [PostObjectType!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likesNumber: Int
  likesNumber_not: Int
  likesNumber_in: [Int!]
  likesNumber_not_in: [Int!]
  likesNumber_lt: Int
  likesNumber_lte: Int
  likesNumber_gt: Int
  likesNumber_gte: Int
  dislikesNumber: Int
  dislikesNumber_not: Int
  dislikesNumber_in: [Int!]
  dislikesNumber_not_in: [Int!]
  dislikesNumber_lt: Int
  dislikesNumber_lte: Int
  dislikesNumber_gt: Int
  dislikesNumber_gte: Int
  replies_every: ReplyWhereInput
  replies_some: ReplyWhereInput
  replies_none: ReplyWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createReply(data: ReplyCreateInput!): Reply!
  updateReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateManyReplies(data: ReplyUpdateManyMutationInput!, where: ReplyWhereInput): BatchPayload!
  upsertReply(where: ReplyWhereUniqueInput!, create: ReplyCreateInput!, update: ReplyUpdateInput!): Reply!
  deleteReply(where: ReplyWhereUniqueInput!): Reply
  deleteManyReplies(where: ReplyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PostObjectType {
  Message
  Reply
}

type Query {
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  reply(where: ReplyWhereUniqueInput!): Reply
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply]!
  repliesConnection(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReplyConnection!
  node(id: ID!): Node
}

type Reply {
  id: ID!
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: [ID!]!
  likesNumber: Int!
  dislikes: [ID!]!
  dislikesNumber: Int!
  message: Message!
  createdAt: DateTime!
}

type ReplyConnection {
  pageInfo: PageInfo!
  edges: [ReplyEdge]!
  aggregate: AggregateReply!
}

input ReplyCreatedislikesInput {
  set: [ID!]
}

input ReplyCreateInput {
  id: ID
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: ReplyCreatelikesInput
  likesNumber: Int!
  dislikes: ReplyCreatedislikesInput
  dislikesNumber: Int!
  message: MessageCreateOneWithoutRepliesInput!
}

input ReplyCreatelikesInput {
  set: [ID!]
}

input ReplyCreateManyWithoutMessageInput {
  create: [ReplyCreateWithoutMessageInput!]
  connect: [ReplyWhereUniqueInput!]
}

input ReplyCreateWithoutMessageInput {
  id: ID
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: ReplyCreatelikesInput
  likesNumber: Int!
  dislikes: ReplyCreatedislikesInput
  dislikesNumber: Int!
}

type ReplyEdge {
  node: Reply!
  cursor: String!
}

enum ReplyOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  type_ASC
  type_DESC
  text_ASC
  text_DESC
  likesNumber_ASC
  likesNumber_DESC
  dislikesNumber_ASC
  dislikesNumber_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReplyPreviousValues {
  id: ID!
  userId: ID!
  type: PostObjectType!
  text: String!
  likes: [ID!]!
  likesNumber: Int!
  dislikes: [ID!]!
  dislikesNumber: Int!
  createdAt: DateTime!
}

input ReplyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  type: PostObjectType
  type_not: PostObjectType
  type_in: [PostObjectType!]
  type_not_in: [PostObjectType!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likesNumber: Int
  likesNumber_not: Int
  likesNumber_in: [Int!]
  likesNumber_not_in: [Int!]
  likesNumber_lt: Int
  likesNumber_lte: Int
  likesNumber_gt: Int
  likesNumber_gte: Int
  dislikesNumber: Int
  dislikesNumber_not: Int
  dislikesNumber_in: [Int!]
  dislikesNumber_not_in: [Int!]
  dislikesNumber_lt: Int
  dislikesNumber_lte: Int
  dislikesNumber_gt: Int
  dislikesNumber_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  NOT: [ReplyScalarWhereInput!]
}

type ReplySubscriptionPayload {
  mutation: MutationType!
  node: Reply
  updatedFields: [String!]
  previousValues: ReplyPreviousValues
}

input ReplySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReplyWhereInput
  AND: [ReplySubscriptionWhereInput!]
  OR: [ReplySubscriptionWhereInput!]
  NOT: [ReplySubscriptionWhereInput!]
}

input ReplyUpdatedislikesInput {
  set: [ID!]
}

input ReplyUpdateInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: ReplyUpdatelikesInput
  likesNumber: Int
  dislikes: ReplyUpdatedislikesInput
  dislikesNumber: Int
  message: MessageUpdateOneRequiredWithoutRepliesInput
}

input ReplyUpdatelikesInput {
  set: [ID!]
}

input ReplyUpdateManyDataInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: ReplyUpdatelikesInput
  likesNumber: Int
  dislikes: ReplyUpdatedislikesInput
  dislikesNumber: Int
}

input ReplyUpdateManyMutationInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: ReplyUpdatelikesInput
  likesNumber: Int
  dislikes: ReplyUpdatedislikesInput
  dislikesNumber: Int
}

input ReplyUpdateManyWithoutMessageInput {
  create: [ReplyCreateWithoutMessageInput!]
  delete: [ReplyWhereUniqueInput!]
  connect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  disconnect: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutMessageInput!]
  deleteMany: [ReplyScalarWhereInput!]
  updateMany: [ReplyUpdateManyWithWhereNestedInput!]
}

input ReplyUpdateManyWithWhereNestedInput {
  where: ReplyScalarWhereInput!
  data: ReplyUpdateManyDataInput!
}

input ReplyUpdateWithoutMessageDataInput {
  userId: ID
  type: PostObjectType
  text: String
  likes: ReplyUpdatelikesInput
  likesNumber: Int
  dislikes: ReplyUpdatedislikesInput
  dislikesNumber: Int
}

input ReplyUpdateWithWhereUniqueWithoutMessageInput {
  where: ReplyWhereUniqueInput!
  data: ReplyUpdateWithoutMessageDataInput!
}

input ReplyUpsertWithWhereUniqueWithoutMessageInput {
  where: ReplyWhereUniqueInput!
  update: ReplyUpdateWithoutMessageDataInput!
  create: ReplyCreateWithoutMessageInput!
}

input ReplyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  type: PostObjectType
  type_not: PostObjectType
  type_in: [PostObjectType!]
  type_not_in: [PostObjectType!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likesNumber: Int
  likesNumber_not: Int
  likesNumber_in: [Int!]
  likesNumber_not_in: [Int!]
  likesNumber_lt: Int
  likesNumber_lte: Int
  likesNumber_gt: Int
  likesNumber_gte: Int
  dislikesNumber: Int
  dislikesNumber_not: Int
  dislikesNumber_in: [Int!]
  dislikesNumber_not_in: [Int!]
  dislikesNumber_lt: Int
  dislikesNumber_lte: Int
  dislikesNumber_gt: Int
  dislikesNumber_gte: Int
  message: MessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
}

input ReplyWhereUniqueInput {
  id: ID
}

type Subscription {
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  reply(where: ReplySubscriptionWhereInput): ReplySubscriptionPayload
}
`
      }
    